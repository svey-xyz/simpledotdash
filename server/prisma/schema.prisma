
generator client {
  provider = "prisma-client-js"
	output   = "./data.schema"
}

datasource db {
  provider = "sqlite"
	url = "file:../data/prisma.db"
}

model Settings {
	id   		String @id @unique @default(cuid())
	title 	String @unique
	icon 		String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model App {
  id String @id @unique @default(cuid())
  title String
  url String
	displayURL String?
  description String?
	icon String?
	taxonomies Taxonomy[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

	machine Machine? @relation(fields: [machineId], references: [id])
	machineId String

	cluster Cluster? @relation(fields: [clusterId], references: [id])
	clusterId String

	@@map("apps")
}

model MachineCluster {
  machineId String
  clusterId String

  machine Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  cluster Cluster @relation(fields: [clusterId], references: [id], onDelete: Cascade)

  @@id([machineId, clusterId]) // Composite key to avoid duplicates
  @@map("machine_clusters")
}

model Cluster {
	id String @id @unique @default(cuid())
	title String
	description String?

	machines MachineCluster[]
	apps App[]

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

	@@map("clusters")
}

model Machine {
	id String @id @unique @default(cuid())
	title String
	ip String
	physical Boolean
	dashboardURL String?
	description String?

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

	apps App[]
	clusters MachineCluster[]

	@@map("machines")
}

model Taxonomy {
	id String @id @unique @default(cuid())
	title String
	description String?
	apps App[]

	@@map("taxonomies")
}

model User {
	id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  apps 					App[]
	machines 			Machine[]
	clusters			Cluster[]
	settings      Settings?

	@@map(name: "users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String 	@map("user_id")
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@map("sessions")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}